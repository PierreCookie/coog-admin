#!/bin/bash
# vim: set ft=sh:
# This script helps doing with postgres docker image.
# More informations: https://hub.docker.com/_/postgres/

get_dir() {
        local script_path; script_path=$(readlink -f "$0")
        local script_dir; script_dir=$(dirname "$script_path")
        echo "$script_dir"
}

server() {
        docker run \
                $DOCKER_DAEMON_OPTS \
                --network "$NETWORK_NAME" \
                --name "$NETWORK_NAME-postgres-dw" \
                -e "POSTGRES_USER=$POSTGRES_USER" \
                -e "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" \
                -e "PGDATA=/var/lib/postgresql/data/pgdata" \
                -v /usr/share/zoneinfo:/usr/share/zoneinfo:ro \
                -v /etc/timezone:/etc/timezone:ro \
                -v "$DW_VOLUME:/var/lib/postgresql/data" \
                -v "/tmp:/tmp" \
                "$POSTGRES_IMAGE" "$@"
}

client() {
        docker run \
                $DOCKER_INTERACTIVE_OPTS \
                --network "$NETWORK_NAME" \
                -v "/tmp:/tmp" \
                "$POSTGRES_IMAGE" \
                psql -h "$NETWORK_NAME-postgres-dw" -U "$POSTGRES_USER" "$@"
}

dump() {
        if [ -z "$DW_POSTGRES_HOST" ]
        then
                docker run \
                        $DOCKER_PIPED_OPTS \
                        --network "$NETWORK_NAME" \
                        -e PGHOST="$NETWORK_NAME-postgres-dw" \
                        -e PGUSER="$DW_DB_USER" \
                        -e PGPASSWORD="$DW_DB_PASSWORD" \
                        "$POSTGRES_IMAGE" \
                        pg_dump "$DW_DB_NAME" "$@"
        else
                docker run \
                        $DOCKER_PIPED_OPTS \
                        -e PGHOST="$DW_POSTGRES_HOST" \
                        -e PGUSER="$DW_DB_USER" \
                        -e PGPASSWORD="$DW_DB_PASSWORD" \
                        "$POSTGRES_IMAGE" \
                        pg_dump "$DW_DB_NAME" "$@"
        fi
}

action() {
        docker "$@" "$NETWORK_NAME-postgres-dw"
}

usage() {
        echo
        echo Available commands
        echo
        echo "  server    -> runs a postgres docker image as a server"
        echo "  client    -> runs a postgres docker image as a client"
        echo "  dump      -> creates a dump of coog database"
        echo "  <action>  -> calls docker action on server container"
        echo
}

main() {
        source "$(get_dir)/config"
	source "$(get_dir)/defaults/pentaho.conf"
        [ ! -z "$PGUSER" ] && DW_DB_USER="$PGUSER"
        [ ! -z "$PGPASSWORD" ] && DW_DB_PASSWORD="$PGPASSWORD"
        [ ! -z "$DB_NAME" ] && DW_DB_NAME="$DB_NAME"
        #
        [ -z "$1" ] && usage && return 0
        local cmd; cmd=$1; shift
        #
        [ "$cmd" = "server" ] && { server "$@"; return $?; }
        [ "$cmd" = "client" ] && { client "$@"; return $?; }
        [ "$cmd" = "dump" ] && { dump "$@"; return $?; }
        action "$cmd" "$@"
}

main "$@"
