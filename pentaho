#!/bin/bash
# vim: set ft=sh:



get_dir() {
        local script_path; script_path=$(readlink -f "$0")
        local script_dir; script_dir=$(dirname "$script_path")
        echo "$script_dir"
}

init() {
	[ -e "$PENTAHO_CONF" ] && echo backup old config before && return 1
	cp "$(get_dir)/defaults/pentaho.conf" "$PENTAHO_CONF"
	echo Change datawarehouse connection settings in $PENTAHO_CONF
	# git pull $ADDRESS pull x version
	# Ou mettre le git folder ?? deux git (etl et server) ou unique taille(-5 Mo)
	# /usr/lib/coog/bi ? 
}

edit() {
        $EDITOR "$PENTAHO_CONF"
}

_build(){
#	(cd $(get_dir)/images/bi/ && docker-compose build)
	mkdir $wd || return 1

	git clone http://github.com/coopengo/coog-bi.git $wd
	docker build -t bi_pentaho $wd/bi/pentaho/
	docker build -t bi_server $wd/bi/biserver/
	
	rm -R $wd

	docker system prune
	
	
}


usage() {
        echo
        echo "  Available commands Global(g), Server(s), Etl(e)"
        echo
	echo "  build			-> (g,s,e) build pentaho images"
	echo "  init			-> (g)     init pentaho.conf"
	echo "  run			-> (g,s,e) run server and etl image"
	echo "  <action>		-> (g,s,e) calls docker action on pentaho container"
        echo "  <images> <command>	-> (s,e)   launch commands for specific pentaho image"
	echo "  import			-> (s)     import default dashboard and cube"
	echo 
	echo Available images put it at the then end of the command line
	echo
	echo "  etl			-> datawarehouse construction image"
	echo "  server			-> reporting server image"
	echo
}

_server(){
	[ "$cmd" = "server" ] && usage && return 0
	[ "$cmd" = "build" ] && docker build -t bi_server $wd/bi/biserver/ && return 0;
	[ "$cmd" = "run" ] && { _server_run; return $?; } 
	set -- "${@:1:$(($#-1))}" 
	docker $cmd $@ biserver
}
_etl(){
	[ "$cmd" = "etl" ] && usage && return 0
	[ "$cmd" = "build" ] && docker build -t bi_pentaho .$wd/bi/pentaho/ && return 0;
	[ "$cmd" = "run" ] && { _etl_run $@ ; return $?; }
	set -- "${@:1:$(($#-1))}" 
	docker $cmd $@ pentaho	
}

_etl_run(){
	docker run --rm $ETL_ENV bi_pentaho 
}

_import(){
	docker ps | grep bi_server
	[ "$?" != 0 ] && echo "Server needs to run, ./pentaho run server OR ./pentaho run" && return 1
	docker run --rm --name biserver_import --link biserver:biserver --entrypoint "/opt/pentaho/scripts/import_file.sh" bi_server:latest
}

_run() {
	_etl_run & _server_run
}

_server_run(){
	docker run --name biserver -d --link postgres:postgres -e PGHOST=$DW_HOSTNAME -e PGUSER=$DW_USER -e PG_PASSWORD=$DW_PASSWORD -p 8080:8080 bi_server 
}

_docker(){
	docker ps | grep pentaho
	[ "$?" != 0 ] && docker $cmd $@ pentaho
	docker ps | grep biserver
	[ "$?" != 0 ] && docker $cmd $@ biserver
}
main(){

	source "$(get_dir)/config"
	#
	[ -z "$1" ] && usage && return 0

	for img; do true; done
	
	local cmd; cmd="$1"; shift

	local wd; wd="$(get_dir)/workspace"

	[ "$cmd" = "init" ] && { init; return $?; }
	
	[ ! -e "$PENTAHO_CONF" ] && echo "You need to run: './pentaho init'" && return 1
	
	[ "$cmd" = "edit" ] && { edit; return $?; }	
	
	source $PENTAHO_CONF
	
	ETL_ENV="-e COOG_HOSTNAME=$COOG_POSTGRES_HOST -e COOG_DB=$COOG_DB_NAME -e COOG_PORT=$COOG_POSTGRES_PORT \
         -e COOG_USER=$COOG_DB_USER -e COOG_PASSWORD=$COOG_DB_PASSWORD -e DW_HOSTNAME=$DW_HOSTNAME \
         -e DW_DB=$DW_DB -e DW_PORT=$DW_PORT -e DW_USER=$DW_USER -e DW_PASSWORD=$DW_PASSWORD "

	[ "$img" = "etl" ] && { _etl $@; return $?; }
	[ "$img" = "server" ] && { _server $@; return $?; }
	#
	[ "$cmd" = "run" ] && { _run $@; return $?; }
	[ "$cmd" = "build" ] && { _build; return $?; }
	[ "$cmd" = "import" ] && { _import; return $?; }
	
	docker $@
}

main "$@"
