#!/bin/bash

if [ -z "$COOG_CODE_DIR" ] || [ ! -d "$COOG_CODE_DIR" ] || [ -z "$COOG_DATA_DIR" ]
then
    {
        echo "Please make sure that these two env vars are set:"
        echo "  COOG_CODE_DIR: your coog-admin install folder"
        echo "  COOG_DATA_DIR: the folder where to keep your custom config"
    } >&2 && exit 1
fi

_export_conf_docker() {
    export PORTAL_VERSION API_VERSION GATEWAY_VERSION NETWORK_NAME
    if [ ! -z "$CUSTOMER" ]
    then
        echo $CUSTOMER
        export CUSTOMER="-$CUSTOMER"
    fi
}

_build_conf_docker() {
    export PORTAL_VERSION="$1"
    export API_VERSION="$1"
    export GATEWAY_VERSION="$1"
}

_build() {
    _build_conf_docker "$@"
    cd "$COOG_CODE_DIR/images/portal" && . ./build "$@"
}

_up() {
    _export_conf_docker
    cd images/portal
    docker-compose up -d "$@"
}

_down() {
    _export_conf_docker
    cd images/portal
    docker-compose down -v "$@"
}

########
# main #
########

usage() {
    echo
    echo Admin commands
    echo
    echo "  build                -> build portal image: <tag> <repo:branch>+"
    echo "  down                 -> shut down all container"
    echo "  down api gateway ... -> shut down relative container"
    echo "  up                   -> running all container"
    echo "  up api gateway ...   -> running relative container"
    return 0
}

main() {
    source "$COOG_CODE_DIR/config"
    [ -z "$1" ] && usage && return 0
    local cmd; cmd="$1"; shift
    [ "$cmd" = "build" ] && { (_build "$@"); return $?; }
    [ "$cmd" = "down" ] && { (_down "$@"); return $?; }
    [ "$cmd" = "up" ] && { (_up "$@"); return $?; }
    usage
}

main "$@"
